AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  Employee Management Client

Parameters:
  S3Bucket:
    Type: String
    Description: Parameter to specify the S3 Bucket to use for deployment
  FrontendDeployment:
    Default: remote
    Type: String
    AllowedValues:
      - local
      - remote
    ConstraintDescription: Must specify 'local' or 'remote' for FrontendDeployment.

Conditions:
  DeployCloudFront: !Equals
    - !Ref FrontendDeployment
    - remote

Globals:
  Function:
    Timeout: 20

  Api:
    Cors:
      AllowMethods: "'GET,POST,PUT,OPTIONS'"
      AllowHeaders: "'content-type'"
      AllowOrigin: "'*'"

Resources:

  CloudFrontOriginAccessIdentity:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Condition: DeployCloudFront
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: 'Serverless frontend website'

  CloudfrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Condition: DeployCloudFront
    Properties:
      DistributionConfig:
        Comment: "Cloudfront distribution for serverless website"
        DefaultRootObject: "index.html"
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        # List of origins that Cloudfront will connect to
        Origins:
          - Id: s3-website
            DomainName: !Sub "${S3Bucket}.s3.us-east-2.amazonaws.com"
            OriginPath: /static
            S3OriginConfig:
              # Restricting Bucket access through an origin access identity
              OriginAccessIdentity:
                Fn::Sub: 'origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}'
        # To connect the CDN to the origins you need to specify behaviours
        DefaultCacheBehavior:
          # Compress resources automatically ( gzip )
          Compress: 'true'
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: false
          TargetOriginId: s3-website
          ViewerProtocolPolicy : redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad

  S3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Condition: DeployCloudFront
    Properties:
      Bucket: !Ref S3Bucket
      PolicyDocument:
        # Restricting access to cloudfront only.
        Statement:
          -
            Effect: Allow
            Action: 's3:GetObject'
            Resource:
              - !Sub "arn:aws:s3:::${S3Bucket}/*"
            Principal:
              AWS: !Sub "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity ${CloudFrontOriginAccessIdentity}"

  AccessDynamoDBTablesRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaRole'
        - 'arn:aws:iam::aws:policy/AWSLambdaExecute'
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: 'WriteToCloudWatch'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - cloudwatch:PutMetricData
                Resource: '*'
        - PolicyName: 'AccessEmployeeTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/Employees'
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/Employees/index/*'
        - PolicyName: 'AccessDepartmentTable'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: dynamodb:*
                Resource:
                  Fn::Join:
                    - ''
                    - - 'arn:aws:dynamodb:'
                      - !Ref 'AWS::Region'
                      - ':'
                      - !Ref 'AWS::AccountId'
                      - ':table/Departments'

  GetEmployeeLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: EmployeeContactServiceLambda
      Handler: com.nashss.se.employeecontactservice.lambda.GetSingleEmployeeDetailsLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /employee/{employeeId}
            Method: get

  GetAllEmployeesLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: EmployeeContactServiceLambda
      Handler: com.nashss.se.employeecontactservice.lambda.GetAllEmployeesLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /employees/{employeeId}/{forward}
            Method: get

  CreateEmployeeLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: EmployeeContactServiceLambda
      Handler: com.nashss.se.employeecontactservice.lambda.CreateEmployeeLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /employees
            Method: post

  UpdateEmployeeLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: EmployeeContactServiceLambda
      Handler: com.nashss.se.employeecontactservice.lambda.UpdateEmployeeLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /employees/{employeeId}
            Method: put

  GetAllDepartmentsLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: EmployeeContactServiceLambda
      Handler: com.nashss.se.employeecontactservice.lambda.GetAllDepartmentsLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /departments
            Method: get

  CreateDepartmentLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: EmployeeContactServiceLambda
      Handler: com.nashss.se.employeecontactservice.lambda.CreateDepartmentLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /departments
            Method: post


  UpdateDepartmentLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: EmployeeContactServiceLambda
      Handler: com.nashss.se.employeecontactservice.lambda.UpdateDepartmentLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /departments/{deptId}
            Method: put

  GetDepartmentLambda:
    Type: AWS::Serverless::Function
    Properties:
      Role: !GetAtt AccessDynamoDBTablesRole.Arn
      CodeUri: EmployeeContactServiceLambda
      Handler: com.nashss.se.employeecontactservice.lambda.GetSingleDepartmentDetailsLambda::handleRequest
      Runtime: java11
      Architectures:
        - x86_64
      MemorySize: 512
      Environment:
        Variables:
          JAVA_TOOL_OPTIONS: -XX:+TieredCompilation -XX:TieredStopAtLevel=1
      Events:
        EmployeeManagementClient:
          Type: Api
          Properties:
            Path: /departments/{deptId}
            Method: get
  #-----------------------------------------------------------------

  EmployeesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "employeeId"
          AttributeType: "S"
        - AttributeName: "employeeStatus"
          AttributeType: "S"
        - AttributeName: "deptId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "employeeId"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "Employees"
      GlobalSecondaryIndexes:
        - IndexName: "EmployeeStatusIndex"
          KeySchema:
            - AttributeName: "employeeStatus"
              KeyType: "HASH"
            - AttributeName: "employeeId"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"
        - IndexName: "DepartmentIdIndex"
          KeySchema:
            - AttributeName: "deptId"
              KeyType: "HASH"
            - AttributeName: "employeeId"
              KeyType: "RANGE"
          Projection:
            ProjectionType: "ALL"

  DepartmentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: "deptId"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "deptId"
          KeyType: "HASH"
      BillingMode: "PAY_PER_REQUEST"
      TableName: "Departments"